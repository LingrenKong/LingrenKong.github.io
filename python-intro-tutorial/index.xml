<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python-intro-tutorials on 至诚居</title>
    <link>/python-intro-tutorial/</link>
    <description>Recent content in Python-intro-tutorials on 至诚居</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 04 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="/python-intro-tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>测试页面</title>
      <link>/python-intro-tutorial/testing/</link>
      <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/python-intro-tutorial/testing/</guid>
      <description>本页为Python教程在博客展开的测试页面~</description>
    </item>
    
    <item>
      <title>寒假Python修行-3</title>
      <link>/python-intro-tutorial/python-3/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/python-intro-tutorial/python-3/</guid>
      <description>课程内容控制结构（条件、循环）条件if 条件1:操作1elif 条件2:操作2else:操作3其中elif可以无限个，只有if是必须有且仅有一个，else至多一个
循环while 条件：操作else:其实可以有个else但是不常用for 变量/变量组 in 序列:操作虽然也被称为for，但是和C的有很大区别–操作对象是可迭代对象。
善于利用break和continue来组织你的代码，注意break只能跳出一重循环，所以对于多重循环可以巧妙利用函数的return来跳出，这个会在函数部分讲到。
一些 Python 特殊语法列表生成式list-comprehensions官方文档：list-comprehensions
如何写0-9的平方列表：
squares = []for x in range(10):squares.append(x**2)squares = list(map(lambda x: x**2, range(10)))squares = [x**2 for x in range(10)]squares## [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]这种写法支持1个for+0个或者多个for/if语句：</description>
    </item>
    
    <item>
      <title>寒假Python修行-2</title>
      <link>/python-intro-tutorial/python-2/</link>
      <pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/python-intro-tutorial/python-2/</guid>
      <description>上节课习题解答 ~
课程内容 基本数据类型 可以看菜鸟教程，或者看RUC信息学院一位师兄写的介绍
输入输出 input函数： Python提供了input()内置函数从标准输入读入一行文本，默认的标准输入是键盘。
接受一个参数作为打出的注释，没有其他可变内容。
字符串格式化输出： Python尽管有着十分友好的输出语法print，但是有些时候还是需要格式化输出字符串的功能。
在Python中主要有四种格式化字符串的方法：
第一种是类似于C的方法，在旧Python2中常用
注意和C的区别在于%后面只接受单一参数，多个输入要用元组打包。如果担心参数太多容易乱，可以使用关键字和字典
name = &amp;#39;李狗蛋&amp;#39; age = 18 print(&amp;#34;我的名字是%s&amp;#34;%name)#在字符后面接上%，这个整体是一个格式化字符串，不一定要print出来 t = &amp;#34;我的名字是%s&amp;#34;%name print(&amp;#39;格式化作用于字符串而不是print:&amp;#39;,t) print(&amp;#34;我的名字是%s，我的年龄是%d&amp;#34;%(name,age))#元组打包格式化 print(&amp;#34;我的名字是%(na)s，我的年龄是%(ag)d&amp;#34;%{&amp;#39;ag&amp;#39;:age,&amp;#39;na&amp;#39;:name})#注意前面是（）括号，后面字典才是{} 第二种是Python3字符串方法
这是通过为字符串对象内置.format方法实现的
可以用help(&amp;quot; &amp;quot;.format)/help(str.format)直接看函数简介
 str整体的文档在https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str 格式化字符串的网址在https://docs.python.org/3/library/string.html#formatstrings  print(&amp;#34;count {0}{1}{2}&amp;#34;.format(1,2,3)) # format()内的东西采用逗号分隔，相当于作为一个元组输入，而前面{}里面的序号对应元组的位序 print(&amp;#34;count {}{}{}&amp;#34;.format(1,2,3))# 不写就按默认顺序 print(&amp;#34;{0[1]}{1.__doc__}&amp;#34;.format([1,2],&amp;#34;lower&amp;#34;))#输入数据对象可以再进行.(调用属性)或者[]操作 # *对可迭代对象的解包 https://www.python.org/dev/peps/pep-3132/ &amp;#34;&amp;#34;&amp;#34; python的len函数是一个很有用的函数，对字符也有多个功能 &amp;#34;&amp;#34;&amp;#34; string = &amp;#34;中文字符串的len😀&amp;#34; print(len(string),&amp;#39;中文英文都是按一个字计算的&amp;#39;) #10 print(len(string.encode(&amp;#39;utf-8&amp;#39;)),&amp;#39;中文6*3+英文3*1+1*4=25（英文不会被转换为utf8代码）&amp;#39;) &amp;#34;&amp;#34;&amp;#34; 字符串对象有几个比较重要的内置方法 &amp;#34;&amp;#34;&amp;#34; s = &amp;#34;I love programming&amp;#34; s.title()# &amp;#39;I Love Programming&amp;#39; s.lower()# &amp;#39;i love programming&amp;#39; s.</description>
    </item>
    
    <item>
      <title>寒假Python修行DAY1：Python学习建议</title>
      <link>/python-intro-tutorial/python-1/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/python-intro-tutorial/python-1/</guid>
      <description>课程内容 整体建议   Python社区很广，学不完的，所以请按需学习，掌握搜索技巧
  学会使用论坛文档的资源
 搜索引擎（推荐bing） 论坛与博客：CSDN/Stack Overflow 英文看得懂（不是英语好）很重要 适当合理使用文档    自己锻炼自己（具体问题具体分析）
 kaggle学习与比赛 刷LeetCode等 写个人博客    欢迎关注RUC统计调查协会: 关于package 参考：菜鸟教程Python3
安装和虚拟环境 conda换源加速：
conda clean -i 去掉之前的源conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/rconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/proconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/特殊的源（完整版见官网，forge比较常见，Pytorch深度学习要用）conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ conda config --set show_channel_urls yes 有了这个就可以找到.</description>
    </item>
    
  </channel>
</rss>
